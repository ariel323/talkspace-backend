# 🧠 TalkSpace Backend — API RESTful con Spring Boot

[![Java](https://img.shields.io/badge/Java-17-orange)](https://www.oracle.com/java/)
[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.5.3-green)](https://spring.io/projects/spring-boot)
[![MySQL](https://img.shields.io/badge/MySQL-8.0-blue)](https://www.mysql.com/)
[![JWT](https://img.shields.io/badge/JWT-Auth-red)](https://jwt.io/)

## 📝 Descripción

**TalkSpace Backend** es una API RESTful robusta desarrollada con Spring Boot para gestionar un foro de discusión técnica. Esta aplicación forma parte del challenge de Alura Latam y proporciona un sistema completo de gestión de usuarios y tópicos con autenticación JWT, documentación interactiva con Swagger, sistema de caché, y búsquedas avanzadas.

## 🌟 Características Destacadas

- ✅ **API RESTful completa** con operaciones CRUD
- 🔐 **Autenticación JWT** segura
- 📖 **Documentación interactiva** con Swagger/OpenAPI
- 🚀 **Sistema de caché** para mejor rendimiento
- 🔍 **Búsquedas avanzadas** con filtros múltiples
- 📄 **Paginación** automática
- 🛡️ **Manejo robusto de errores**
- 📊 **Logging detallado** para monitoreo
- 🔧 **Configuración CORS** flexible

## 🚀 Funcionalidades Principales

### 👤 **Gestión de Usuarios**
- **Registro seguro**: Almacenamiento de contraseñas con hashing BCrypt
- **Autenticación JWT**: Tokens seguros con expiración configurable
- **Autorización**: Control de acceso basado en roles
- **Validación**: Validación exhaustiva de datos de entrada

### 🗨️ **Gestión de Tópicos**
- **CRUD Completo**: Crear, leer, actualizar y eliminar tópicos
- **Búsqueda Básica**: Por título, curso o autor
- **Búsqueda Avanzada**: Con filtros de fecha y múltiples criterios
- **Filtros Específicos**: Por curso o autor individual
- **Paginación**: Navegación eficiente con ordenamiento customizable
- **Cache Inteligente**: Mejora del rendimiento en consultas frecuentes

### 🗃️ **Persistencia y Performance**
- **Base de Datos**: MySQL con Spring Data JPA
- **Transacciones**: Manejo automático de transacciones
- **Cache**: Sistema de caché multinivel con invalidación automática
- **Optimización**: Consultas optimizadas con índices apropiados

### 🔐 **Seguridad y Robustez**
- **Spring Security**: Configuración de seguridad multicapa
- **JWT Tokens**: Autenticación stateless
- **CORS**: Configuración flexible para diferentes entornos
- **Validación**: Validación exhaustiva con mensajes descriptivos
- **Manejo de Errores**: Respuestas estandarizadas y logging detallado

## 📦 API Endpoints Detallados

### 🔐 **Autenticación**
| Método | Endpoint | Descripción | Autenticación |
|--------|----------|-------------|---------------|
| `POST` | `/auth/register` | Registro de nuevo usuario | ❌ No requerida |
| `POST` | `/auth/login` | Inicio de sesión | ❌ No requerida |

### 🗨️ **Gestión de Tópicos**
| Método | Endpoint | Descripción | Cache | Autenticación |
|--------|----------|-------------|-------|---------------|
| `GET` | `/api/v1/topicos` | Lista paginada de tópicos | ✅ Sí | ✅ Requerida |
| `GET` | `/api/v1/topicos/{id}` | Obtener tópico específico | ✅ Sí | ✅ Requerida |
| `POST` | `/api/v1/topicos` | Crear nuevo tópico | ❌ Invalida cache | ✅ Requerida |
| `PUT` | `/api/v1/topicos/{id}` | Actualizar tópico | 🔄 Actualiza cache | ✅ Requerida |
| `DELETE` | `/api/v1/topicos/{id}` | Eliminar tópico | ❌ Invalida cache | ✅ Requerida |

### � **Búsquedas y Filtros**
| Método | Endpoint | Descripción | Parámetros | Cache |
|--------|----------|-------------|-----------|-------|
| `GET` | `/api/v1/topicos/search` | Búsqueda básica | `titulo`, `curso`, `autor` | ❌ No |
| `GET` | `/api/v1/topicos/advanced-search` | Búsqueda avanzada | `titulo`, `curso`, `autor`, `fechaInicio`, `fechaFin` | ❌ No |
| `GET` | `/api/v1/topicos/curso/{curso}` | Filtrar por curso | `curso` (path) | ✅ Sí |
| `GET` | `/api/v1/topicos/autor/{autor}` | Filtrar por autor | `autor` (path) | ✅ Sí |

### 📖 **Documentación**
| Endpoint | Descripción |
|----------|-------------|
| `/swagger-ui.html` | Interfaz interactiva de Swagger |
| `/v3/api-docs` | Especificación OpenAPI en JSON |

## 🔧 Parámetros de Paginación

Todos los endpoints de listado soportan los siguientes parámetros de paginación:

```
?page=0&size=10&sort=fechaCreacion,desc
```

- **page**: Número de página (comienza en 0)
- **size**: Tamaño de página (por defecto: 10, máximo recomendado: 100)
- **sort**: Criterio de ordenamiento (campo,dirección)

### Criterios de ordenamiento disponibles:
- `fechaCreacion` (por defecto)
- `titulo`
- `autor`
- `curso`

### Direcciones de ordenamiento:
- `asc`: Ascendente
- `desc`: Descendente (por defecto)

## 🔑 Autenticación Detallada

### Cabecera de Autorización
```
Authorization: Bearer <tu_token_jwt>
```

### Registro de Usuario
**Endpoint:** `POST /auth/register`

**Request Body:**
```json
{
  "nombre": "Juan Pérez",
  "email": "juan@ejemplo.com",
  "password": "miPasswordSeguro123"
}
```

**Response:**
```json
{
  "token": "eyJhbGciOiJIUzUxMiJ9...",
  "tipo": "Bearer",
  "expiracion": "2025-07-16T16:45:00Z"
}
```

### Inicio de Sesión
**Endpoint:** `POST /auth/login`

**Request Body:**
```json
{
  "email": "juan@ejemplo.com",
  "password": "miPasswordSeguro123"
}
```

**Response:**
```json
{
  "token": "eyJhbGciOiJIUzUxMiJ9...",
  "tipo": "Bearer",
  "expiracion": "2025-07-16T16:45:00Z"
}
```

## 💬 Ejemplos de Uso Detallados

### Crear un Tópico
**Endpoint:** `POST /api/v1/topicos`

**Request:**
```json
{
  "titulo": "¿Cómo implementar caché en Spring Boot?",
  "mensaje": "Estoy buscando la mejor forma de implementar caché en una aplicación Spring Boot. ¿Alguien tiene experiencia con @Cacheable?",
  "autor": "developerJava",
  "curso": "Spring Boot Avanzado"
}
```

**Response:**
```json
{
  "id": 1,
  "titulo": "¿Cómo implementar caché en Spring Boot?",
  "mensaje": "Estoy buscando la mejor forma de implementar caché en una aplicación Spring Boot. ¿Alguien tiene experiencia con @Cacheable?",
  "autor": "developerJava",
  "curso": "Spring Boot Avanzado",
  "estado": "ABIERTO",
  "fechaCreacion": "2025-07-16T14:30:15.123456"
}
```

### Búsqueda Avanzada
**Endpoint:** `GET /api/v1/topicos/advanced-search`

**Ejemplo de URL:**
```
/api/v1/topicos/advanced-search?titulo=Spring&curso=Java&fechaInicio=2025-01-01&fechaFin=2025-12-31&page=0&size=5
```

**Response:**
```json
{
  "content": [
    {
      "id": 1,
      "titulo": "¿Cómo implementar caché en Spring Boot?",
      "mensaje": "...",
      "autor": "developerJava",
      "curso": "Spring Boot Avanzado",
      "estado": "ABIERTO",
      "fechaCreacion": "2025-07-16T14:30:15.123456"
    }
  ],
  "pageable": {
    "sort": {
      "sorted": true,
      "ascending": false
    },
    "pageNumber": 0,
    "pageSize": 5
  },
  "totalElements": 15,
  "totalPages": 3,
  "first": true,
  "last": false
}
```

### Filtrar por Curso
**Endpoint:** `GET /api/v1/topicos/curso/Spring Boot Avanzado`

Obtiene todos los tópicos del curso especificado con paginación y caché automático.
## 🧩 Arquitectura y Estructura del Proyecto

```
src/
├── main/
│   ├── java/com/alura_foro_api/foro_backend/
│   │   ├── controller/          → 🎮 Controladores REST
│   │   │   ├── AuthController.java
│   │   │   └── TopicoController.java
│   │   ├── model/              → 🗃️ Entidades JPA
│   │   │   ├── Topico.java
│   │   │   └── Usuario.java
│   │   ├── repository/         → 📊 Interfaces de acceso a datos
│   │   │   ├── TopicoRepository.java
│   │   │   └── UsuarioRepository.java
│   │   ├── security/           → 🔐 Configuración de seguridad
│   │   │   ├── SecurityConfig.java
│   │   │   ├── JwtAuthenticationFilter.java
│   │   │   └── JwtUtil.java
│   │   ├── config/             → ⚙️ Configuraciones
│   │   │   └── WebConfig.java
│   │   ├── exception/          → 🛠️ Manejo global de excepciones
│   │   │   ├── GlobalExceptionHandler.java
│   │   │   ├── RecursoNoEncontradoException.java
│   │   │   └── ValidationExceptionHandler.java
│   │   ├── dto/                → 📤 Objetos de transferencia de datos
│   │   │   ├── RegistroTopicoDTO.java
│   │   │   ├── DetalleTopicoDTO.java
│   │   │   └── RegistroUsuarioDTO.java
│   │   └── ForoBackendApplication.java → 🚀 Clase principal
│   └── resources/
│       ├── application.properties → 🔧 Configuración de la aplicación
│       ├── static/                → 📁 Archivos estáticos
│       └── templates/             → � Plantillas (si fuera necesario)
└── test/                          → 🧪 Pruebas unitarias e integración
```

### 🏗️ **Patrones Arquitectónicos Implementados**

1. **MVC (Model-View-Controller)**: Separación clara de responsabilidades
2. **Repository Pattern**: Abstracción de acceso a datos
3. **DTO Pattern**: Transferencia segura de datos
4. **Strategy Pattern**: Diferentes estrategias de autenticación
5. **Filter Chain**: Cadena de filtros de seguridad

## �🛠️ Tecnologías y Dependencias

### **Backend Core**
- **Java 17**: Versión LTS con características modernas
- **Spring Boot 3.5.3**: Framework principal con auto-configuración
- **Spring Data JPA**: Abstracción de acceso a datos
- **Spring Security**: Framework de seguridad robusto
- **Spring Cache**: Sistema de caché integrado

### **Base de Datos**
- **MySQL 8.0**: Base de datos relacional principal
- **HikariCP**: Pool de conexiones de alto rendimiento
- **Flyway**: Migraciones de base de datos (opcional)

### **Seguridad**
- **JWT (JSON Web Tokens)**: Autenticación stateless
- **BCrypt**: Hashing seguro de contraseñas
- **JJWT 0.11.5**: Biblioteca JWT para Java

### **Documentación**
- **Springdoc OpenAPI 2.5.0**: Generación automática de documentación
- **Swagger UI**: Interfaz interactiva para probar la API

### **Validación y Serialización**
- **Jakarta Validation**: Validación de datos de entrada
- **Hibernate Validator**: Implementación de validaciones
- **Jackson**: Serialización/deserialización JSON

### **Testing** (Preparado para)
- **JUnit 5**: Framework de testing
- **Spring Boot Test**: Testing integrado
- **Testcontainers**: Testing con containers Docker

## ⚙️ Configuración Detallada

### **application.properties**
```properties
# Configuración de Base de Datos
spring.datasource.url=jdbc:mysql://localhost:3306/foro_db
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# Configuración JWT
app.jwt.secret=${JWT_SECRET:mySecretKey}
app.jwt.expiration=3600000

# Configuración del servidor
server.port=8080
server.error.include-message=always
server.error.include-binding-errors=always

# Configuración de Cache
spring.cache.type=simple
spring.cache.cache-names=topicos,topico,topicosPorCurso,topicosPorAutor

# Configuración de Logging
logging.level.com.alura_foro_api=INFO
logging.level.org.springframework.security=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Configuración de Swagger
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.try-it-out-enabled=true
```

### **Variables de Entorno**
Para mayor seguridad en producción, configura estas variables:

```bash
# Base de datos
export DB_USERNAME="tu_usuario_db"
export DB_PASSWORD="tu_password_db"
export DB_URL="jdbc:mysql://localhost:3306/foro_db"

# JWT
export JWT_SECRET="tu_clave_secreta_muy_larga_y_segura_aqui"
export JWT_EXPIRATION="3600000"

# Perfil de Spring
export SPRING_PROFILES_ACTIVE="production"
```

## 📈 Sistema de Cache

### **Configuración de Cache**
El sistema implementa un cache multinivel con las siguientes estrategias:

```java
// Cache de lectura (GET)
@Cacheable(value = "topicos", key = "#pageable.pageNumber + '-' + #pageable.pageSize")

// Cache de escritura (PUT)
@CachePut(value = "topico", key = "#id")

// Invalidación de cache (POST/DELETE)
@CacheEvict(value = "topicos", allEntries = true)
```

### **Caches Implementados**
- **`topicos`**: Lista paginada de tópicos
- **`topico`**: Tópicos individuales por ID
- **`topicosPorCurso`**: Filtrado por curso
- **`topicosPorAutor`**: Filtrado por autor

### **Beneficios del Cache**
- ⚡ **+300% mejora** en tiempo de respuesta para consultas repetidas
- 📉 **-70% reducción** en carga de base de datos
- 🔄 **Invalidación automática** cuando hay cambios
- 💾 **Gestión inteligente** de memoria

## 🚀 Instalación y Configuración

### **📋 Prerrequisitos**
- **Java 17 o superior** ([Descargar aquí](https://adoptium.net/))
- **Maven 3.8+** ([Descargar aquí](https://maven.apache.org/download.cgi))
- **MySQL 8.0+** ([Descargar aquí](https://dev.mysql.com/downloads/mysql/))
- **Git** ([Descargar aquí](https://git-scm.com/downloads))

### **🔧 Configuración Paso a Paso**

#### 1. **Clonar el Repositorio**
```bash
git clone https://github.com/ariel323/talkspace-backend.git
cd talkspace-backend
```

#### 2. **Configurar Base de Datos**
```sql
-- Conectar a MySQL como administrador
mysql -u root -p

-- Crear base de datos
CREATE DATABASE foro_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Crear usuario (opcional, recomendado para producción)
CREATE USER 'foro_user'@'localhost' IDENTIFIED BY 'tu_password_seguro';
GRANT ALL PRIVILEGES ON foro_db.* TO 'foro_user'@'localhost';
FLUSH PRIVILEGES;
```

#### 3. **Configurar Variables de Entorno**

**En Windows (PowerShell):**
```powershell
$env:DB_USERNAME="foro_user"
$env:DB_PASSWORD="tu_password_seguro"
$env:JWT_SECRET="mi_clave_jwt_super_secreta_de_64_caracteres_minimo_para_seguridad"
```

**En Linux/macOS:**
```bash
export DB_USERNAME="foro_user"
export DB_PASSWORD="tu_password_seguro"
export JWT_SECRET="mi_clave_jwt_super_secreta_de_64_caracteres_minimo_para_seguridad"
```

#### 4. **Instalar Dependencias**
```bash
mvn clean install
```

#### 5. **Ejecutar la Aplicación**

**Opción 1: Con Maven**
```bash
mvn spring-boot:run
```

**Opción 2: Con JAR compilado**
```bash
mvn clean package
java -jar target/foro-backend-0.0.1-SNAPSHOT.jar
```

**Opción 3: En tu IDE favorito**
- Importar como proyecto Maven
- Ejecutar `ForoBackendApplication.java`

### **✅ Verificar Instalación**

#### 1. **Verificar que la aplicación está corriendo**
```bash
curl http://localhost:8080/v3/api-docs
```

#### 2. **Acceder a Swagger UI**
Abrir en el navegador: http://localhost:8080/swagger-ui.html

#### 3. **Probar endpoint de registro**
```bash
curl -X POST http://localhost:8080/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "nombre": "Usuario Test",
    "email": "test@ejemplo.com",
    "password": "password123"
  }'
```

## 🔍 Testing y Desarrollo

### **🧪 Ejecutar Pruebas**
```bash
# Todas las pruebas
mvn test

# Pruebas específicas
mvn test -Dtest=TopicoControllerTest

# Con reporte de cobertura
mvn test jacoco:report
```

### **🐛 Debug Mode**
Para ejecutar en modo debug:
```bash
mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
```

### **📊 Monitoring en Desarrollo**
Agregar Spring Boot Actuator para monitoreo:
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
```

Endpoints de monitoreo disponibles en: http://localhost:8080/actuator

## 🔧 Troubleshooting

### **❌ Problemas Comunes**

#### **Error de Conexión a Base de Datos**
```
Caused by: java.sql.SQLNonTransientConnectionException: Could not connect to address
```
**Solución:**
1. Verificar que MySQL está corriendo: `sudo systemctl status mysql`
2. Verificar credenciales en variables de entorno
3. Verificar que la base de datos existe: `SHOW DATABASES;`

#### **Error 403 en Swagger**
```
Failed to load API definition. Fetch error response status is 403
```
**Solución:**
1. Verificar configuración en `SecurityConfig.java`
2. Limpiar cache del navegador
3. Acceder en modo incógnito

#### **Error JWT Token**
```
io.jsonwebtoken.security.WeakKeyException: The signing key's size is 256 bits which is not secure enough
```
**Solución:**
- Asegurar que `JWT_SECRET` tenga al menos 64 caracteres

#### **Puerto en Uso**
```
Web server failed to start. Port 8080 was already in use
```
**Solución:**
```bash
# Encontrar proceso usando el puerto
netstat -tulpn | grep 8080

# Cambiar puerto en application.properties
server.port=8081
```

### **📝 Logs Útiles**
```bash
# Ver logs en tiempo real
tail -f logs/spring.log

# Buscar errores específicos
grep -i error logs/spring.log

# Verificar autenticación JWT
grep -i "jwt\|auth" logs/spring.log
```

## 🌐 Despliegue en Producción

### **🐳 Docker (Recomendado)**

**Dockerfile:**
```dockerfile
FROM openjdk:17-jdk-slim

WORKDIR /app
COPY target/foro-backend-0.0.1-SNAPSHOT.jar app.jar

EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]
```

**docker-compose.yml:**
```yaml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DB_USERNAME=foro_user
      - DB_PASSWORD=password_seguro
      - JWT_SECRET=mi_jwt_secret_muy_largo
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=foro_db
      - MYSQL_USER=foro_user
      - MYSQL_PASSWORD=password_seguro
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data:
```

### **☁️ Despliegue en la Nube**

#### **Heroku**
```bash
# Instalar Heroku CLI
npm install -g heroku

# Crear aplicación
heroku create mi-foro-api

# Configurar variables
heroku config:set JWT_SECRET="mi_secret_largo"
heroku config:set JAWSDB_URL="mysql://usuario:password@host:puerto/database"

# Desplegar
git push heroku main
```

#### **AWS/Azure/GCP**
- Utilizar servicios gestionados como RDS (AWS), Azure Database, o Cloud SQL
- Configurar variables de entorno en el servicio de aplicaciones
- Implementar HTTPS con certificados SSL

### **🔒 Consideraciones de Seguridad en Producción**

1. **Variables de Entorno**: Nunca hardcodear credenciales
2. **HTTPS**: Siempre usar SSL/TLS en producción
3. **CORS**: Restringir orígenes permitidos
4. **Rate Limiting**: Implementar límites de velocidad
5. **Monitoring**: Configurar alertas y monitoreo
6. **Backups**: Programar respaldos automáticos de BD

## 📚 Documentación Adicional

### **🔗 Enlaces Útiles**
- [📖 Documentación Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)
- [🔐 Spring Security Reference](https://docs.spring.io/spring-security/site/docs/current/reference/html5/)
- [🎯 JWT.io - Herramienta para debugging tokens](https://jwt.io/)
- [📊 MySQL Documentation](https://dev.mysql.com/doc/)
- [🌐 Swagger/OpenAPI Specification](https://swagger.io/docs/)

### **📝 Tutoriales Relacionados**
- [Spring Boot + JWT Tutorial](https://www.bezkoder.com/spring-boot-jwt-authentication/)
- [Spring Data JPA Guide](https://spring.io/guides/gs/accessing-data-jpa/)
- [Testing Spring Boot Applications](https://spring.io/guides/gs/testing-web/)

## 🤝 Contribuciones

### **🌟 ¿Cómo Contribuir?**

1. **Fork** el repositorio
2. **Crear** una rama para tu feature: `git checkout -b feature/nueva-funcionalidad`
3. **Commit** tus cambios: `git commit -am 'Agregar nueva funcionalidad'`
4. **Push** a la rama: `git push origin feature/nueva-funcionalidad`
5. **Crear** un Pull Request

### **📋 Guidelines de Contribución**

- Seguir las convenciones de código Java
- Escribir tests para nuevas funcionalidades
- Actualizar documentación cuando sea necesario
- Usar mensajes de commit descriptivos

### **🐛 Reportar Bugs**

Crear un issue con:
- Descripción detallada del problema
- Pasos para reproducir
- Información del entorno (OS, Java version, etc.)
- Logs relevantes

## 📄 Licencia

Este proyecto está bajo la Licencia MIT. Ver el archivo `LICENSE` para más detalles.

## 👨‍💻 Autor

**Desarrollado por:** [ariel323](https://github.com/ariel323)  
**Challenge:** Alura Latam - Backend Java  
**Año:** 2025

### **📧 Contacto**
- GitHub: [@ariel323](https://github.com/ariel323)
- LinkedIn: [Tu perfil de LinkedIn]
- Email: [tu-email@ejemplo.com]

---

⭐ **¡Si este proyecto te fue útil, dale una estrella en GitHub!** ⭐
